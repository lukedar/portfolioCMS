<?php
/**
 * @file
 * field_group_link.module
 *
 * Defines a field group display formatter that is a link.
 */

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the field group link display formatter.
 */
function field_group_link_field_group_formatter_info() {
  return array(
    'display' => array(
      'link' => array(
        'label' => t('Link'),
        'format_types' => array('open'),
        'default_formatter' => 'open',
        'instance_settings' => array('link_to' => 'entity', 'classes' => ''),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_formatter_settings().
 *
 * Provide a settings form for the field group link formatter.
 */
function field_group_link_field_group_format_settings($group) {
  if ($group->format_type == 'link') {
    $options = array();

    $entity_info = entity_get_info($group->entity_type);

    // Check if this entity type has a uri callback.
    // @See entity_uri()
    if (isset($entity_info['bundles'][$group->bundle]['uri callback']) || isset($entity_info['uri callback'])) {
      $options['entity'] = t('Full !entity_type page', array('!entity_type' => $entity_info['label']));
    }

    $fields = field_info_instances($group->entity_type, $group->bundle);
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'link_field') {
        $options[$field_name] = t('!field_label (Link field)', array('!field_label' => $field['label']));
      }
      elseif ($field_info['type'] == 'entityreference') {
        $options[$field_name] = t('!field_label (Entity reference field)', array('!field_label' => $field['label']));
      }
    }

    $value = isset($group->format_settings['instance_settings']['link_to']) ? $group->format_settings['instance_settings']['link_to'] : 'entity';

    $form['instance_settings']['link_to'] = array(
      '#title' => t('Link to'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $value,
    );

    return $form;
  }
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Render the field group link.
 */
function field_group_link_field_group_pre_render(&$element, $group, &$form) {
  if ($group->format_type == 'link') {

    // Get the entity key from the entity type.
    $entity_key = '#' . $form['#entity_type'];

    if (!isset($form[$entity_key])) {
      // Some entity types store the key in an arbitrary name.
      // Check for the ones that we know of.
      switch ($form['#entity_type']) {
        case 'taxonomy_term':
          $entity_key = '#term';
          break;

        case 'user':
          $entity_key = '#account';
          break;

        // Otherwise just search for #entity.
        // The Bean module is one known to use this.
        default:
          $entity_key = '#entity';
      }
    }

    if (isset($form[$entity_key]) && is_object($form[$entity_key])) {
      $entity = $form[$entity_key];
    }
    else {
      // We can't find the entity.
      // There's nothing we can do, so avoid attempting to create a link.
      return;
    }

    $attributes = array(
      'class' => drupal_html_class($group->group_name),
    );
    if (!empty($group->format_settings['instance_settings']['classes'])) {
      $attributes['class'] = $group->format_settings['instance_settings']['classes'];
    }

    $url = NULL;

    if ($group->format_settings['instance_settings']['link_to'] == 'entity') {
      $entity_url = entity_uri($form['#entity_type'], $entity);
      $url = $entity_url['path'];
    }
    else {
      $field_name = $group->format_settings['instance_settings']['link_to'];
      if (isset($entity->{$field_name})) {
        $field = field_get_items($group->entity_type, $entity, $group->format_settings['instance_settings']['link_to']);
        $field_info = field_info_field($field_name);
        if (!empty($field[0])) {
          if ($field_info['type'] == 'link_field' && !empty($field[0]['url'])) {
            $url = $field[0]['url'];
            if (isset($field[0]['attributes'])) {
              $attributes += $field[0]['attributes'];
            }
          }
          elseif ($field_info['type'] == 'entityreference' && !empty($field[0]['target_id'])) {
            $target_entity_type = $field_info['settings']['target_type'];
            $target_entity = current(entity_load($target_entity_type, array($field[0]['target_id'])));
            if ($target_entity) {
              $entity_url = entity_uri($target_entity_type, $target_entity);
              $url = $entity_url['path'];
            }
          }
        }
      }
    }

    if ($url) {
      $element['#prefix'] = '<a href="' . url($url) . '"' . drupal_attributes($attributes) . '>';
      $element['#suffix'] = '</a>';
    }
  }
}
